# -*- coding: utf-8 -*-
"""Stock-Closing.py

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1_D0KlxbtV4jKrbxDYAMSs83t7TsaoTpL
"""

import yfinance as yf
import matplotlib.pyplot as plt

# Choose a stock ticker symbol
ticker = 'AAPL'

# Download last 30 days of stock data
data = yf.download(ticker, period='30d')

# Ensure 'Close' column is numeric and has no missing values
if 'Close' in data.columns and not data['Close'].dropna().empty:
    close_prices = data['Close'].dropna()

    print(f"\nStock: {ticker}")
    print(f"Minimum Close Price: {close_prices.min():.2f}")
    print(f"Maximum Close Price: {close_prices.max():.2f}")
    print(f"Average Close Price: {close_prices.mean():.2f}")

    # Plot closing prices
    plt.figure(figsize=(10, 5))
    plt.plot(data.index, close_prices, label='Close Price', color='blue')
    plt.title(f'{ticker} Stock Closing Prices - Last 30 Days')
    plt.xlabel('Date')
    plt.ylabel('Price ($)')
    plt.legend()
    plt.grid(True)
    plt.tight_layout()
    plt.show()
else:
    print("Error: No valid 'Close' price data found.")

import yfinance as yf
import matplotlib.pyplot as plt

# Choose a stock ticker symbol
ticker = 'AAPL'

# Download last 30 days of stock data
data = yf.download(ticker, period='30d')

# Ensure 'Close' column is numeric and has no missing values
if 'Close' in data.columns and not data['Close'].dropna().empty:
    close_prices = data['Close'].dropna()

    print(f"\nStock: {ticker}")
    print(f"Minimum Close Price: {close_prices.min():.2f}")
    print(f"Maximum Close Price: {close_prices.max():.2f}")
    print(f"Average Close Price: {close_prices.mean():.2f}")

    # Plot closing prices
    plt.figure(figsize=(10, 5))
    plt.plot(data.index, close_prices, label='Close Price', color='blue')
    plt.title(f'{ticker} Stock Closing Prices - Last 30 Days')
    plt.xlabel('Date')
    plt.ylabel('Price ($)')
    plt.legend()
    plt.grid(True)
    plt.tight_layout()
    plt.show()
else:
    print("Error: No valid 'Close' price data found.")

import yfinance as yf
import matplotlib.pyplot as plt

# Choose stock ticker
ticker = 'AAPL'

# Download 30 days of data
data = yf.download(ticker, period='30d')

# Handle multi-index or unexpected structure
if isinstance(data.columns, pd.MultiIndex):
    close_prices = data['Close'][ticker].dropna()
else:
    close_prices = data['Close'].dropna()

# Check again to avoid errors
if not close_prices.empty:
    print(f"\nStock: {ticker}")
    print(f"Minimum Close Price: {float(close_prices.min()):.2f}")
    print(f"Maximum Close Price: {float(close_prices.max()):.2f}")
    print(f"Average Close Price: {float(close_prices.mean()):.2f}")

    # Plot
    plt.figure(figsize=(10, 5))
    plt.plot(close_prices.index, close_prices, label='Close Price', color='blue')
    plt.title(f'{ticker} Stock Closing Prices - Last 30 Days')
    plt.xlabel('Date')
    plt.ylabel('Price ($)')
    plt.grid(True)
    plt.legend()
    plt.tight_layout()
    plt.show()
else:
    print("No closing price data available.")

import yfinance as yf
import pandas as pd
import matplotlib.pyplot as plt

# Choose stock ticker
ticker = 'AAPL'

# Download 30 days of data
data = yf.download(ticker, period='30d')

# Handle multi-index or unexpected structure
if isinstance(data.columns, pd.MultiIndex):
    close_prices = data['Close'][ticker].dropna()
else:
    close_prices = data['Close'].dropna()

# Check again to avoid errors
if not close_prices.empty:
    print(f"\nStock: {ticker}")
    print(f"Minimum Close Price: {float(close_prices.min()):.2f}")
    print(f"Maximum Close Price: {float(close_prices.max()):.2f}")
    print(f"Average Close Price: {float(close_prices.mean()):.2f}")

    # Plot
    plt.figure(figsize=(10, 5))
    plt.plot(close_prices.index, close_prices, label='Close Price', color='blue')
    plt.title(f'{ticker} Stock Closing Prices - Last 30 Days')
    plt.xlabel('Date')
    plt.ylabel('Price ($)')
    plt.grid(True)
    plt.legend()
    plt.tight_layout()
    plt.show()
else:
    print("No closing price data available.")